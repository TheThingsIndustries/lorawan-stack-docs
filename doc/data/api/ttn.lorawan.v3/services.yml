AppAs:
  name: AppAs
  comment: The AppAs service connects an application or integration to an Application Server.
  methods:
    Subscribe:
      name: Subscribe
      comment: Subscribe to upstream messages.
      input:
        name: ApplicationIdentifiers
      output:
        name: ApplicationUp
        stream: true
    DownlinkQueuePush:
      name: DownlinkQueuePush
      comment: Push downlink messages to the end of the downlink queue.
      input:
        name: DownlinkQueueRequest
      output:
        package: google.protobuf
        name: Empty
      http:
      - method: POST
        path: /as/applications/{end_device_ids.application_ids.application_id}/devices/{end_device_ids.device_id}/down/push
    DownlinkQueueReplace:
      name: DownlinkQueueReplace
      comment: |-
        Replace the entire downlink queue with the specified messages.
        This can also be used to empty the queue by specifying no messages.
      input:
        name: DownlinkQueueRequest
      output:
        package: google.protobuf
        name: Empty
      http:
      - method: POST
        path: /as/applications/{end_device_ids.application_ids.application_id}/devices/{end_device_ids.device_id}/down/replace
    DownlinkQueueList:
      name: DownlinkQueueList
      comment: List the items currently in the downlink queue.
      input:
        name: EndDeviceIdentifiers
      output:
        name: ApplicationDownlinks
      http:
      - method: GET
        path: /as/applications/{application_ids.application_id}/devices/{device_id}/down
    GetMQTTConnectionInfo:
      name: GetMQTTConnectionInfo
      comment: Get connection information to connect an MQTT client.
      input:
        name: ApplicationIdentifiers
      output:
        name: MQTTConnectionInfo
      http:
      - method: GET
        path: /as/applications/{application_id}/mqtt-connection-info
    SimulateUplink:
      name: SimulateUplink
      comment: Simulate an upstream message. This can be used to test integrations.
      input:
        name: ApplicationUp
      output:
        package: google.protobuf
        name: Empty
      http:
      - method: POST
        path: /as/applications/{end_device_ids.application_ids.application_id}/devices/{end_device_ids.device_id}/up/simulate
    EncodeDownlink:
      name: EncodeDownlink
      input:
        name: EncodeDownlinkRequest
      output:
        name: EncodeDownlinkResponse
      http:
      - method: POST
        path: /as/applications/{end_device_ids.application_ids.application_id}/devices/{end_device_ids.device_id}/down/encode
    DecodeUplink:
      name: DecodeUplink
      input:
        name: DecodeUplinkRequest
      output:
        name: DecodeUplinkResponse
      http:
      - method: POST
        path: /as/applications/{end_device_ids.application_ids.application_id}/devices/{end_device_ids.device_id}/up/decode
    DecodeDownlink:
      name: DecodeDownlink
      input:
        name: DecodeDownlinkRequest
      output:
        name: DecodeDownlinkResponse
      http:
      - method: POST
        path: /as/applications/{end_device_ids.application_ids.application_id}/devices/{end_device_ids.device_id}/down/decode
ApplicationAccess:
  name: ApplicationAccess
  comment: |-
    The ApplicationAcces service, exposed by the Identity Server, is used to manage
    API keys and collaborators of applications.
  methods:
    ListRights:
      name: ListRights
      comment: List the rights the caller has on this application.
      input:
        name: ApplicationIdentifiers
      output:
        name: Rights
      http:
      - method: GET
        path: /applications/{application_id}/rights
    CreateAPIKey:
      name: CreateAPIKey
      comment: Create an API key scoped to this application.
      input:
        name: CreateApplicationAPIKeyRequest
      output:
        name: APIKey
      http:
      - method: POST
        path: /applications/{application_ids.application_id}/api-keys
    ListAPIKeys:
      name: ListAPIKeys
      comment: List the API keys for this application.
      input:
        name: ListApplicationAPIKeysRequest
      output:
        name: APIKeys
      http:
      - method: GET
        path: /applications/{application_ids.application_id}/api-keys
    GetAPIKey:
      name: GetAPIKey
      comment: Get a single API key of this application.
      input:
        name: GetApplicationAPIKeyRequest
      output:
        name: APIKey
      http:
      - method: GET
        path: /applications/{application_ids.application_id}/api-keys/{key_id}
    UpdateAPIKey:
      name: UpdateAPIKey
      comment: |-
        Update the rights of an API key of the application.
        This method can also be used to delete the API key, by giving it no rights.
        The caller is required to have all assigned or/and removed rights.
      input:
        name: UpdateApplicationAPIKeyRequest
      output:
        name: APIKey
      http:
      - method: PUT
        path: /applications/{application_ids.application_id}/api-keys/{api_key.id}
    GetCollaborator:
      name: GetCollaborator
      comment: |-
        Get the rights of a collaborator (member) of the application.
        Pseudo-rights in the response (such as the "_ALL" right) are not expanded.
      input:
        name: GetApplicationCollaboratorRequest
      output:
        name: GetCollaboratorResponse
      http:
      - method: ""
        path: ""
      - method: GET
        path: /applications/{application_ids.application_id}/collaborator/user/{collaborator.user_ids.user_id}
      - method: GET
        path: /applications/{application_ids.application_id}/collaborator/organization/{collaborator.organization_ids.organization_id}
    SetCollaborator:
      name: SetCollaborator
      comment: |-
        Set the rights of a collaborator (member) on the application.
        This method can also be used to delete the collaborator, by giving them no rights.
        The caller is required to have all assigned or/and removed rights.
      input:
        name: SetApplicationCollaboratorRequest
      output:
        package: google.protobuf
        name: Empty
      http:
      - method: PUT
        path: /applications/{application_ids.application_id}/collaborators
    ListCollaborators:
      name: ListCollaborators
      comment: List the collaborators on this application.
      input:
        name: ListApplicationCollaboratorsRequest
      output:
        name: Collaborators
      http:
      - method: GET
        path: /applications/{application_ids.application_id}/collaborators
ApplicationActivationSettingRegistry:
  name: ApplicationActivationSettingRegistry
  comment: The ApplicationActivationSettingRegistry service allows clients to manage their application activation settings.
  methods:
    Get:
      name: Get
      comment: Get returns application activation settings.
      input:
        name: GetApplicationActivationSettingsRequest
      output:
        name: ApplicationActivationSettings
      http:
      - method: GET
        path: /js/applications/{application_ids.application_id}/settings
    Set:
      name: Set
      comment: Set creates or updates application activation settings.
      input:
        name: SetApplicationActivationSettingsRequest
      output:
        name: ApplicationActivationSettings
      http:
      - method: POST
        path: /js/applications/{application_ids.application_id}/settings
    Delete:
      name: Delete
      comment: Delete deletes application activation settings.
      input:
        name: DeleteApplicationActivationSettingsRequest
      output:
        package: google.protobuf
        name: Empty
      http:
      - method: DELETE
        path: /js/applications/{application_ids.application_id}/settings
ApplicationCryptoService:
  name: ApplicationCryptoService
  comment: Service for application layer cryptographic operations.
  methods:
    DeriveAppSKey:
      name: DeriveAppSKey
      comment: Derive the application session key (AppSKey).
      input:
        name: DeriveSessionKeysRequest
      output:
        name: AppSKeyResponse
    GetAppKey:
      name: GetAppKey
      comment: Get the AppKey. Crypto Servers may return status code FAILED_PRECONDITION when root keys are not exposed.
      input:
        name: GetRootKeysRequest
      output:
        name: KeyEnvelope
ApplicationPackageRegistry:
  name: ApplicationPackageRegistry
  methods:
    List:
      name: List
      comment: List returns the available packages for the end device.
      input:
        name: EndDeviceIdentifiers
      output:
        name: ApplicationPackages
      http:
      - method: GET
        path: /as/applications/{application_ids.application_id}/devices/{device_id}/packages
    GetAssociation:
      name: GetAssociation
      comment: GetAssociation returns the association registered on the FPort of the end device.
      input:
        name: GetApplicationPackageAssociationRequest
      output:
        name: ApplicationPackageAssociation
      http:
      - method: GET
        path: /as/applications/{ids.end_device_ids.application_ids.application_id}/devices/{ids.end_device_ids.device_id}/packages/associations/{ids.f_port}
    ListAssociations:
      name: ListAssociations
      comment: ListAssociations returns all of the associations of the end device.
      input:
        name: ListApplicationPackageAssociationRequest
      output:
        name: ApplicationPackageAssociations
      http:
      - method: GET
        path: /as/applications/{ids.application_ids.application_id}/devices/{ids.device_id}/packages/associations
    SetAssociation:
      name: SetAssociation
      comment: SetAssociation updates or creates the association on the FPort of the end device.
      input:
        name: SetApplicationPackageAssociationRequest
      output:
        name: ApplicationPackageAssociation
      http:
      - method: PUT
        path: /as/applications/{association.ids.end_device_ids.application_ids.application_id}/devices/{association.ids.end_device_ids.device_id}/packages/associations/{association.ids.f_port}
    DeleteAssociation:
      name: DeleteAssociation
      comment: DeleteAssociation removes the association on the FPort of the end device.
      input:
        name: ApplicationPackageAssociationIdentifiers
      output:
        package: google.protobuf
        name: Empty
      http:
      - method: DELETE
        path: /as/applications/{end_device_ids.application_ids.application_id}/devices/{end_device_ids.device_id}/packages/associations/{f_port}
    GetDefaultAssociation:
      name: GetDefaultAssociation
      comment: GetDefaultAssociation returns the default association registered on the FPort of the application.
      input:
        name: GetApplicationPackageDefaultAssociationRequest
      output:
        name: ApplicationPackageDefaultAssociation
      http:
      - method: GET
        path: /as/applications/{ids.application_ids.application_id}/packages/associations/{ids.f_port}
    ListDefaultAssociations:
      name: ListDefaultAssociations
      comment: ListDefaultAssociations returns all of the default associations of the application.
      input:
        name: ListApplicationPackageDefaultAssociationRequest
      output:
        name: ApplicationPackageDefaultAssociations
      http:
      - method: GET
        path: /as/applications/{ids.application_id}/packages/associations
    SetDefaultAssociation:
      name: SetDefaultAssociation
      comment: SetDefaultAssociation updates or creates the default association on the FPort of the application.
      input:
        name: SetApplicationPackageDefaultAssociationRequest
      output:
        name: ApplicationPackageDefaultAssociation
      http:
      - method: PUT
        path: /as/applications/{default.ids.application_ids.application_id}/packages/associations/{default.ids.f_port}
    DeleteDefaultAssociation:
      name: DeleteDefaultAssociation
      comment: DeleteDefaultAssociation removes the default association on the FPort of the application.
      input:
        name: ApplicationPackageDefaultAssociationIdentifiers
      output:
        package: google.protobuf
        name: Empty
      http:
      - method: DELETE
        path: /as/applications/{application_ids.application_id}/packages/associations/{f_port}
ApplicationPubSubRegistry:
  name: ApplicationPubSubRegistry
  methods:
    GetFormats:
      name: GetFormats
      input:
        package: google.protobuf
        name: Empty
      output:
        name: ApplicationPubSubFormats
      http:
      - method: GET
        path: /as/pubsub-formats
    Get:
      name: Get
      input:
        name: GetApplicationPubSubRequest
      output:
        name: ApplicationPubSub
      http:
      - method: GET
        path: /as/pubsub/{ids.application_ids.application_id}/{ids.pub_sub_id}
    List:
      name: List
      input:
        name: ListApplicationPubSubsRequest
      output:
        name: ApplicationPubSubs
      http:
      - method: GET
        path: /as/pubsub/{application_ids.application_id}
    Set:
      name: Set
      input:
        name: SetApplicationPubSubRequest
      output:
        name: ApplicationPubSub
      http:
      - method: PUT
        path: /as/pubsub/{pubsub.ids.application_ids.application_id}/{pubsub.ids.pub_sub_id}
      - method: POST
        path: /as/pubsub/{pubsub.ids.application_ids.application_id}
    Delete:
      name: Delete
      input:
        name: ApplicationPubSubIdentifiers
      output:
        package: google.protobuf
        name: Empty
      http:
      - method: DELETE
        path: /as/pubsub/{application_ids.application_id}/{pub_sub_id}
ApplicationRegistry:
  name: ApplicationRegistry
  comment: |-
    The ApplicationRegistry service, exposed by the Identity Server, is used to manage
    application registrations.
  methods:
    Create:
      name: Create
      comment: |-
        Create a new application. This also sets the given organization or user as
        first collaborator with all possible rights.
      input:
        name: CreateApplicationRequest
      output:
        name: Application
      http:
      - method: POST
        path: /users/{collaborator.user_ids.user_id}/applications
      - method: POST
        path: /organizations/{collaborator.organization_ids.organization_id}/applications
    Get:
      name: Get
      comment: |-
        Get the application with the given identifiers, selecting the fields specified
        in the field mask.
        More or less fields may be returned, depending on the rights of the caller.
      input:
        name: GetApplicationRequest
      output:
        name: Application
      http:
      - method: GET
        path: /applications/{application_ids.application_id}
    List:
      name: List
      comment: |-
        List applications where the given user or organization is a direct collaborator.
        If no user or organization is given, this returns the applications the caller
        has access to.
        Similar to Get, this selects the fields given by the field mask.
        More or less fields may be returned, depending on the rights of the caller.
      input:
        name: ListApplicationsRequest
      output:
        name: Applications
      http:
      - method: GET
        path: /applications
      - method: GET
        path: /users/{collaborator.user_ids.user_id}/applications
      - method: GET
        path: /organizations/{collaborator.organization_ids.organization_id}/applications
    Update:
      name: Update
      comment: Update the application, changing the fields specified by the field mask to the provided values.
      input:
        name: UpdateApplicationRequest
      output:
        name: Application
      http:
      - method: PUT
        path: /applications/{application.ids.application_id}
    Delete:
      name: Delete
      comment: |-
        Delete the application. This may not release the application ID for reuse.
        All end devices must be deleted from the application before it can be deleted.
      input:
        name: ApplicationIdentifiers
      output:
        package: google.protobuf
        name: Empty
      http:
      - method: DELETE
        path: /applications/{application_id}
    Restore:
      name: Restore
      comment: |-
        Restore a recently deleted application.

        Deployment configuration may specify if, and for how long after deletion,
        entities can be restored.
      input:
        name: ApplicationIdentifiers
      output:
        package: google.protobuf
        name: Empty
      http:
      - method: POST
        path: /applications/{application_id}/restore
    Purge:
      name: Purge
      comment: |-
        Purge the application. This will release the application ID for reuse.
        All end devices must be deleted from the application before it can be deleted.
        The application owner is responsible for clearing data from any (external) integrations
        that may store and expose data by application ID
      input:
        name: ApplicationIdentifiers
      output:
        package: google.protobuf
        name: Empty
      http:
      - method: DELETE
        path: /applications/{application_id}/purge
    IssueDevEUI:
      name: IssueDevEUI
      comment: |-
        Request DevEUI from the configured address block for a device inside the application.
        The maximum number of DevEUI's issued per application can be configured.
      input:
        name: ApplicationIdentifiers
      output:
        name: IssueDevEUIResponse
      http:
      - method: POST
        path: /applications/{application_id}/dev-eui
ApplicationUpStorage:
  name: ApplicationUpStorage
  comment: The ApplicationUpStorage service can be used to query stored application upstream messages.
  methods:
    GetStoredApplicationUp:
      name: GetStoredApplicationUp
      comment: Returns a stream of application messages that have been stored in the database.
      input:
        name: GetStoredApplicationUpRequest
      output:
        name: ApplicationUp
        stream: true
      http:
      - method: GET
        path: /as/applications/{end_device_ids.application_ids.application_id}/devices/{end_device_ids.device_id}/packages/storage/{type}
      - method: GET
        path: /as/applications/{application_ids.application_id}/packages/storage/{type}
ApplicationWebhookRegistry:
  name: ApplicationWebhookRegistry
  methods:
    GetFormats:
      name: GetFormats
      input:
        package: google.protobuf
        name: Empty
      output:
        name: ApplicationWebhookFormats
      http:
      - method: GET
        path: /as/webhook-formats
    GetTemplate:
      name: GetTemplate
      input:
        name: GetApplicationWebhookTemplateRequest
      output:
        name: ApplicationWebhookTemplate
      http:
      - method: GET
        path: /as/webhook-templates/{ids.template_id}
    ListTemplates:
      name: ListTemplates
      input:
        name: ListApplicationWebhookTemplatesRequest
      output:
        name: ApplicationWebhookTemplates
      http:
      - method: GET
        path: /as/webhook-templates
    Get:
      name: Get
      input:
        name: GetApplicationWebhookRequest
      output:
        name: ApplicationWebhook
      http:
      - method: GET
        path: /as/webhooks/{ids.application_ids.application_id}/{ids.webhook_id}
    List:
      name: List
      input:
        name: ListApplicationWebhooksRequest
      output:
        name: ApplicationWebhooks
      http:
      - method: GET
        path: /as/webhooks/{application_ids.application_id}
    Set:
      name: Set
      input:
        name: SetApplicationWebhookRequest
      output:
        name: ApplicationWebhook
      http:
      - method: PUT
        path: /as/webhooks/{webhook.ids.application_ids.application_id}/{webhook.ids.webhook_id}
      - method: POST
        path: /as/webhooks/{webhook.ids.application_ids.application_id}
    Delete:
      name: Delete
      input:
        name: ApplicationWebhookIdentifiers
      output:
        package: google.protobuf
        name: Empty
      http:
      - method: DELETE
        path: /as/webhooks/{application_ids.application_id}/{webhook_id}
As:
  name: As
  comment: The As service manages the Application Server.
  methods:
    GetLink:
      name: GetLink
      comment: |-
        Get a link configuration from the Application Server to Network Server.
        This only contains the configuration. Use GetLinkStats to view statistics and any link errors.
      input:
        name: GetApplicationLinkRequest
      output:
        name: ApplicationLink
      http:
      - method: GET
        path: /as/applications/{application_ids.application_id}/link
    SetLink:
      name: SetLink
      comment: |-
        Set a link configuration from the Application Server a Network Server.
        This call returns immediately after setting the link configuration; it does not wait for a link to establish.
        To get link statistics or errors, use GetLinkStats.
        Note that there can only be one Application Server instance linked to a Network Server for a given application at a time.
      input:
        name: SetApplicationLinkRequest
      output:
        name: ApplicationLink
      http:
      - method: PUT
        path: /as/applications/{application_ids.application_id}/link
    DeleteLink:
      name: DeleteLink
      comment: Delete the link between the Application Server and Network Server for the specified application.
      input:
        name: ApplicationIdentifiers
      output:
        package: google.protobuf
        name: Empty
      http:
      - method: DELETE
        path: /as/applications/{application_id}/link
    GetLinkStats:
      name: GetLinkStats
      comment: |-
        GetLinkStats returns the link statistics.
        This call returns a NotFound error code if there is no link for the given application identifiers.
        This call returns the error code of the link error if linking to a Network Server failed.
      input:
        name: ApplicationIdentifiers
      output:
        name: ApplicationLinkStats
      http:
      - method: GET
        path: /as/applications/{application_id}/link/stats
    GetConfiguration:
      name: GetConfiguration
      input:
        name: GetAsConfigurationRequest
      output:
        name: GetAsConfigurationResponse
      http:
      - method: GET
        path: /as/configuration
AsEndDeviceRegistry:
  name: AsEndDeviceRegistry
  comment: The AsEndDeviceRegistry service allows clients to manage their end devices on the Application Server.
  methods:
    Get:
      name: Get
      comment: |-
        Get returns the device that matches the given identifiers.
        If there are multiple matches, an error will be returned.
      input:
        name: GetEndDeviceRequest
      output:
        name: EndDevice
      http:
      - method: GET
        path: /as/applications/{end_device_ids.application_ids.application_id}/devices/{end_device_ids.device_id}
    Set:
      name: Set
      comment: Set creates or updates the device.
      input:
        name: SetEndDeviceRequest
      output:
        name: EndDevice
      http:
      - method: PUT
        path: /as/applications/{end_device.ids.application_ids.application_id}/devices/{end_device.ids.device_id}
      - method: POST
        path: /as/applications/{end_device.ids.application_ids.application_id}/devices
    Delete:
      name: Delete
      comment: |-
        Delete deletes the device that matches the given identifiers.
        If there are multiple matches, an error will be returned.
      input:
        name: EndDeviceIdentifiers
      output:
        package: google.protobuf
        name: Empty
      http:
      - method: DELETE
        path: /as/applications/{application_ids.application_id}/devices/{device_id}
AsJs:
  name: AsJs
  comment: The AsJs service connects an Application Server to a Join Server.
  methods:
    GetAppSKey:
      name: GetAppSKey
      comment: Request the application session key for a particular session.
      input:
        name: SessionKeyRequest
      output:
        name: AppSKeyResponse
AsNs:
  name: AsNs
  comment: The AsNs service connects an Application Server to a Network Server.
  methods:
    DownlinkQueueReplace:
      name: DownlinkQueueReplace
      comment: |-
        Replace the entire downlink queue with the specified messages.
        This can also be used to empty the queue by specifying no messages.
        Note that this will trigger an immediate downlink if a downlink slot is available.
      input:
        name: DownlinkQueueRequest
      output:
        package: google.protobuf
        name: Empty
    DownlinkQueuePush:
      name: DownlinkQueuePush
      comment: |-
        Push downlink messages to the end of the downlink queue.
        Note that this will trigger an immediate downlink if a downlink slot is available.
      input:
        name: DownlinkQueueRequest
      output:
        package: google.protobuf
        name: Empty
    DownlinkQueueList:
      name: DownlinkQueueList
      comment: List the items currently in the downlink queue.
      input:
        name: EndDeviceIdentifiers
      output:
        name: ApplicationDownlinks
ClientAccess:
  name: ClientAccess
  comment: |-
    The ClientAcces service, exposed by the Identity Server, is used to manage
    collaborators of OAuth clients.
  methods:
    ListRights:
      name: ListRights
      comment: List the rights the caller has on this application.
      input:
        name: ClientIdentifiers
      output:
        name: Rights
      http:
      - method: GET
        path: /clients/{client_id}/rights
    GetCollaborator:
      name: GetCollaborator
      comment: |-
        Get the rights of a collaborator (member) of the client.
        Pseudo-rights in the response (such as the "_ALL" right) are not expanded.
      input:
        name: GetClientCollaboratorRequest
      output:
        name: GetCollaboratorResponse
      http:
      - method: ""
        path: ""
      - method: GET
        path: /clients/{client_ids.client_id}/collaborator/user/{collaborator.user_ids.user_id}
      - method: GET
        path: /clients/{client_ids.client_id}/collaborator/organization/{collaborator.organization_ids.organization_id}
    SetCollaborator:
      name: SetCollaborator
      comment: |-
        Set the rights of a collaborator (member) on the OAuth client.
        This method can also be used to delete the collaborator, by giving them no rights.
        The caller is required to have all assigned or/and removed rights.
      input:
        name: SetClientCollaboratorRequest
      output:
        package: google.protobuf
        name: Empty
      http:
      - method: PUT
        path: /clients/{client_ids.client_id}/collaborators
    ListCollaborators:
      name: ListCollaborators
      comment: List the collaborators on this OAuth client.
      input:
        name: ListClientCollaboratorsRequest
      output:
        name: Collaborators
      http:
      - method: GET
        path: /clients/{client_ids.client_id}/collaborators
ClientRegistry:
  name: ClientRegistry
  comment: |-
    The ClientRegistry service, exposed by the Identity Server, is used to manage
    OAuth client registrations.
  methods:
    Create:
      name: Create
      comment: |-
        Create a new OAuth client. This also sets the given organization or user as
        first collaborator with all possible rights.
      input:
        name: CreateClientRequest
      output:
        name: Client
      http:
      - method: POST
        path: /users/{collaborator.user_ids.user_id}/clients
      - method: POST
        path: /organizations/{collaborator.organization_ids.organization_id}/clients
    Get:
      name: Get
      comment: |-
        Get the OAuth client with the given identifiers, selecting the fields specified
        in the field mask.
        More or less fields may be returned, depending on the rights of the caller.
      input:
        name: GetClientRequest
      output:
        name: Client
      http:
      - method: GET
        path: /clients/{client_ids.client_id}
    List:
      name: List
      comment: |-
        List OAuth clients where the given user or organization is a direct collaborator.
        If no user or organization is given, this returns the OAuth clients the caller
        has access to.
        Similar to Get, this selects the fields specified in the field mask.
        More or less fields may be returned, depending on the rights of the caller.
      input:
        name: ListClientsRequest
      output:
        name: Clients
      http:
      - method: GET
        path: /clients
      - method: GET
        path: /users/{collaborator.user_ids.user_id}/clients
      - method: GET
        path: /organizations/{collaborator.organization_ids.organization_id}/clients
    Update:
      name: Update
      comment: Update the OAuth client, changing the fields specified by the field mask to the provided values.
      input:
        name: UpdateClientRequest
      output:
        name: Client
      http:
      - method: PUT
        path: /clients/{client.ids.client_id}
    Delete:
      name: Delete
      comment: Delete the OAuth client. This may not release the client ID for reuse.
      input:
        name: ClientIdentifiers
      output:
        package: google.protobuf
        name: Empty
      http:
      - method: DELETE
        path: /clients/{client_id}
    Restore:
      name: Restore
      comment: |-
        Restore a recently deleted client.

        Deployment configuration may specify if, and for how long after deletion,
        entities can be restored.
      input:
        name: ClientIdentifiers
      output:
        package: google.protobuf
        name: Empty
      http:
      - method: POST
        path: /clients/{client_id}/restore
    Purge:
      name: Purge
      comment: Purge the client. This will release the client ID for reuse.
      input:
        name: ClientIdentifiers
      output:
        package: google.protobuf
        name: Empty
      http:
      - method: DELETE
        path: /clients/{client_id}/purge
Configuration:
  name: Configuration
  methods:
    ListFrequencyPlans:
      name: ListFrequencyPlans
      input:
        name: ListFrequencyPlansRequest
      output:
        name: ListFrequencyPlansResponse
      http:
      - method: GET
        path: /configuration/frequency-plans
ContactInfoRegistry:
  name: ContactInfoRegistry
  comment: |-
    The ContactInfoRegistry service, exposed by the Identity Server, is used for
    validating contact information of registered entities.

    The actual contact information can be managed with the different registry services:
    ApplicationRegistry, ClientRegistry, GatewayRegistry, OrganizationRegistry and UserRegistry.
  methods:
    RequestValidation:
      name: RequestValidation
      comment: Request validation for the non-validated contact info for the given entity.
      input:
        name: EntityIdentifiers
      output:
        name: ContactInfoValidation
      http:
      - method: POST
        path: /contact_info/validation
    Validate:
      name: Validate
      comment: Validate confirms a contact info validation.
      input:
        name: ContactInfoValidation
      output:
        package: google.protobuf
        name: Empty
      http:
      - method: PATCH
        path: /contact_info/validation
DeviceRepository:
  name: DeviceRepository
  methods:
    ListBrands:
      name: ListBrands
      input:
        name: ListEndDeviceBrandsRequest
      output:
        name: ListEndDeviceBrandsResponse
      http:
      - method: GET
        path: /dr/applications/{application_ids.application_id}/brands
    GetBrand:
      name: GetBrand
      input:
        name: GetEndDeviceBrandRequest
      output:
        name: EndDeviceBrand
      http:
      - method: GET
        path: /dr/applications/{application_ids.application_id}/brands/{brand_id}
    ListModels:
      name: ListModels
      input:
        name: ListEndDeviceModelsRequest
      output:
        name: ListEndDeviceModelsResponse
      http:
      - method: GET
        path: /dr/applications/{application_ids.application_id}/brands/{brand_id}/models
      - method: GET
        path: /dr/applications/{application_ids.application_id}/models
    GetModel:
      name: GetModel
      input:
        name: GetEndDeviceModelRequest
      output:
        name: EndDeviceModel
      http:
      - method: GET
        path: /dr/applications/{application_ids.application_id}/brands/{brand_id}/models/{model_id}
    GetTemplate:
      name: GetTemplate
      input:
        name: GetTemplateRequest
      output:
        name: EndDeviceTemplate
      http:
      - method: GET
        path: /dr/applications/{application_ids.application_id}/brands/{version_ids.brand_id}/models/{version_ids.model_id}/{version_ids.firmware_version}/{version_ids.band_id}/template
    GetUplinkDecoder:
      name: GetUplinkDecoder
      input:
        name: GetPayloadFormatterRequest
      output:
        name: MessagePayloadDecoder
      http:
      - method: GET
        path: /dr/applications/{application_ids.application_id}/brands/{version_ids.brand_id}/models/{version_ids.model_id}/{version_ids.firmware_version}/{version_ids.band_id}/formatters/uplink/decoder
    GetDownlinkDecoder:
      name: GetDownlinkDecoder
      input:
        name: GetPayloadFormatterRequest
      output:
        name: MessagePayloadDecoder
      http:
      - method: GET
        path: /dr/applications/{application_ids.application_id}/brands/{version_ids.brand_id}/models/{version_ids.model_id}/{version_ids.firmware_version}/{version_ids.band_id}/formatters/downlink/decoder
    GetDownlinkEncoder:
      name: GetDownlinkEncoder
      input:
        name: GetPayloadFormatterRequest
      output:
        name: MessagePayloadEncoder
      http:
      - method: GET
        path: /dr/applications/{application_ids.application_id}/brands/{version_ids.brand_id}/models/{version_ids.model_id}/{version_ids.firmware_version}/{version_ids.band_id}/formatters/downlink/encoder
EndDeviceClaimingServer:
  name: EndDeviceClaimingServer
  comment: |-
    The EndDeviceClaimingServer service configures authorization to claim end devices registered in an application,
    and allows clients to claim end devices.
  methods:
    Claim:
      name: Claim
      comment: Claims the end device by claim authentication code or QR code and transfers the device to the target application.
      input:
        name: ClaimEndDeviceRequest
      output:
        name: EndDeviceIdentifiers
      http:
      - method: POST
        path: /edcs/claim
    AuthorizeApplication:
      name: AuthorizeApplication
      comment: |-
        Authorize the End Device Claiming Server to claim devices registered in the given application. The application
        identifiers are the source application, where the devices are registered before they are claimed.
        The API key is used to access the application, find the device, verify the claim request and delete the end device
        from the source application.
      input:
        name: AuthorizeApplicationRequest
      output:
        package: google.protobuf
        name: Empty
      http:
      - method: POST
        path: /edcs/applications/{application_ids.application_id}/authorize
    UnauthorizeApplication:
      name: UnauthorizeApplication
      comment: |-
        Unauthorize the End Device Claiming Server to claim devices in the given application.
        This reverts the authorization given with rpc AuthorizeApplication.
      input:
        name: ApplicationIdentifiers
      output:
        package: google.protobuf
        name: Empty
      http:
      - method: DELETE
        path: /edcs/applications/{application_id}/authorize
EndDeviceQRCodeGenerator:
  name: EndDeviceQRCodeGenerator
  methods:
    GetFormat:
      name: GetFormat
      comment: Return the QR code format.
      input:
        name: GetQRCodeFormatRequest
      output:
        name: QRCodeFormat
      http:
      - method: GET
        path: /qr-codes/end-devices/formats/{format_id}
    ListFormats:
      name: ListFormats
      comment: Returns the supported formats.
      input:
        package: google.protobuf
        name: Empty
      output:
        name: QRCodeFormats
      http:
      - method: GET
        path: /qr-codes/end-devices/formats
    Generate:
      name: Generate
      comment: Generates a QR code.
      input:
        name: GenerateEndDeviceQRCodeRequest
      output:
        name: GenerateQRCodeResponse
      http:
      - method: POST
        path: /qr-codes/end-devices
EndDeviceRegistry:
  name: EndDeviceRegistry
  comment: |-
    The EndDeviceRegistry service, exposed by the Identity Server, is used to manage
    end device registrations.

    After registering an end device, it also needs to be registered in
    the NsEndDeviceRegistry that is exposed by the Network Server,
    the AsEndDeviceRegistry that is exposed by the Application Server,
    and the JsEndDeviceRegistry that is exposed by the Join Server.

    Before deleting an end device it first needs to be deleted from the
    NsEndDeviceRegistry, the AsEndDeviceRegistry and the JsEndDeviceRegistry.
  methods:
    Create:
      name: Create
      comment: |-
        Create a new end device within an application.

        After registering an end device, it also needs to be registered in
        the NsEndDeviceRegistry that is exposed by the Network Server,
        the AsEndDeviceRegistry that is exposed by the Application Server,
        and the JsEndDeviceRegistry that is exposed by the Join Server.
      input:
        name: CreateEndDeviceRequest
      output:
        name: EndDevice
      http:
      - method: POST
        path: /applications/{end_device.ids.application_ids.application_id}/devices
    Get:
      name: Get
      comment: |-
        Get the end device with the given identifiers, selecting the fields specified
        in the field mask.
        More or less fields may be returned, depending on the rights of the caller.
      input:
        name: GetEndDeviceRequest
      output:
        name: EndDevice
      http:
      - method: GET
        path: /applications/{end_device_ids.application_ids.application_id}/devices/{end_device_ids.device_id}
    GetIdentifiersForEUIs:
      name: GetIdentifiersForEUIs
      comment: Get the identifiers of the end device that has the given EUIs registered.
      input:
        name: GetEndDeviceIdentifiersForEUIsRequest
      output:
        name: EndDeviceIdentifiers
    List:
      name: List
      comment: |-
        List end devices in the given application.
        Similar to Get, this selects the fields given by the field mask.
        More or less fields may be returned, depending on the rights of the caller.
      input:
        name: ListEndDevicesRequest
      output:
        name: EndDevices
      http:
      - method: GET
        path: /applications/{application_ids.application_id}/devices
    Update:
      name: Update
      comment: Update the end device, changing the fields specified by the field mask to the provided values.
      input:
        name: UpdateEndDeviceRequest
      output:
        name: EndDevice
      http:
      - method: PUT
        path: /applications/{end_device.ids.application_ids.application_id}/devices/{end_device.ids.device_id}
    Delete:
      name: Delete
      comment: |-
        Delete the end device with the given IDs.

        Before deleting an end device it first needs to be deleted from the
        NsEndDeviceRegistry, the AsEndDeviceRegistry and the JsEndDeviceRegistry.
        This is NOT done automatically.
      input:
        name: EndDeviceIdentifiers
      output:
        package: google.protobuf
        name: Empty
      http:
      - method: DELETE
        path: /applications/{application_ids.application_id}/devices/{device_id}
EndDeviceRegistrySearch:
  name: EndDeviceRegistrySearch
  comment: |-
    The EndDeviceRegistrySearch service indexes devices in the EndDeviceRegistry
    and enables searching for them.
    This service is not implemented on all deployments.
  methods:
    SearchEndDevices:
      name: SearchEndDevices
      comment: Search for end devices in the given application that match the conditions specified in the request.
      input:
        name: SearchEndDevicesRequest
      output:
        name: EndDevices
      http:
      - method: GET
        path: /search/applications/{application_ids.application_id}/devices
EndDeviceTemplateConverter:
  name: EndDeviceTemplateConverter
  methods:
    ListFormats:
      name: ListFormats
      comment: Returns the configured formats to convert from.
      input:
        package: google.protobuf
        name: Empty
      output:
        name: EndDeviceTemplateFormats
      http:
      - method: GET
        path: /edtc/formats
    Convert:
      name: Convert
      comment: Converts the binary data to a stream of end device templates.
      input:
        name: ConvertEndDeviceTemplateRequest
      output:
        name: EndDeviceTemplate
        stream: true
      http:
      - method: POST
        path: /edtc/convert
EntityAccess:
  name: EntityAccess
  methods:
    AuthInfo:
      name: AuthInfo
      comment: AuthInfo returns information about the authentication that is used on the request.
      input:
        package: google.protobuf
        name: Empty
      output:
        name: AuthInfoResponse
      http:
      - method: GET
        path: /auth_info
EntityRegistrySearch:
  name: EntityRegistrySearch
  comment: |-
    The EntityRegistrySearch service indexes entities in the various registries
    and enables searching for them.
    This service is not implemented on all deployments.
  methods:
    SearchApplications:
      name: SearchApplications
      comment: |-
        Search for applications that match the conditions specified in the request.
        Non-admin users will only match applications that they have rights on.
      input:
        name: SearchApplicationsRequest
      output:
        name: Applications
      http:
      - method: GET
        path: /search/applications
    SearchClients:
      name: SearchClients
      comment: |-
        Search for OAuth clients that match the conditions specified in the request.
        Non-admin users will only match OAuth clients that they have rights on.
      input:
        name: SearchClientsRequest
      output:
        name: Clients
      http:
      - method: GET
        path: /search/clients
    SearchGateways:
      name: SearchGateways
      comment: |-
        Search for gateways that match the conditions specified in the request.
        Non-admin users will only match gateways that they have rights on.
      input:
        name: SearchGatewaysRequest
      output:
        name: Gateways
      http:
      - method: GET
        path: /search/gateways
    SearchOrganizations:
      name: SearchOrganizations
      comment: |-
        Search for organizations that match the conditions specified in the request.
        Non-admin users will only match organizations that they have rights on.
      input:
        name: SearchOrganizationsRequest
      output:
        name: Organizations
      http:
      - method: GET
        path: /search/organizations
    SearchUsers:
      name: SearchUsers
      comment: |-
        Search for users that match the conditions specified in the request.
        This is only available to admin users.
      input:
        name: SearchUsersRequest
      output:
        name: Users
      http:
      - method: GET
        path: /search/users
Events:
  name: Events
  comment: The Events service serves events from the cluster.
  methods:
    Stream:
      name: Stream
      comment: |-
        Stream live events, optionally with a tail of historical events (depending on server support and retention policy).
        Events may arrive out-of-order.
      input:
        name: StreamEventsRequest
      output:
        name: Event
        stream: true
      http:
      - method: POST
        path: /events
    FindRelated:
      name: FindRelated
      input:
        name: FindRelatedEventsRequest
      output:
        name: FindRelatedEventsResponse
      http:
      - method: GET
        path: /events/related
GatewayAccess:
  name: GatewayAccess
  comment: |-
    The GatewayAcces service, exposed by the Identity Server, is used to manage
    API keys and collaborators of gateways.
  methods:
    ListRights:
      name: ListRights
      comment: List the rights the caller has on this gateway.
      input:
        name: GatewayIdentifiers
      output:
        name: Rights
      http:
      - method: GET
        path: /gateways/{gateway_id}/rights
    CreateAPIKey:
      name: CreateAPIKey
      comment: Create an API key scoped to this gateway.
      input:
        name: CreateGatewayAPIKeyRequest
      output:
        name: APIKey
      http:
      - method: POST
        path: /gateways/{gateway_ids.gateway_id}/api-keys
    ListAPIKeys:
      name: ListAPIKeys
      comment: List the API keys for this gateway.
      input:
        name: ListGatewayAPIKeysRequest
      output:
        name: APIKeys
      http:
      - method: GET
        path: /gateways/{gateway_ids.gateway_id}/api-keys
    GetAPIKey:
      name: GetAPIKey
      comment: Get a single API key of this gateway.
      input:
        name: GetGatewayAPIKeyRequest
      output:
        name: APIKey
      http:
      - method: GET
        path: /gateways/{gateway_ids.gateway_id}/api-keys/{key_id}
    UpdateAPIKey:
      name: UpdateAPIKey
      comment: |-
        Update the rights of an API key of the gateway.
        This method can also be used to delete the API key, by giving it no rights.
        The caller is required to have all assigned or/and removed rights.
      input:
        name: UpdateGatewayAPIKeyRequest
      output:
        name: APIKey
      http:
      - method: PUT
        path: /gateways/{gateway_ids.gateway_id}/api-keys/{api_key.id}
    GetCollaborator:
      name: GetCollaborator
      comment: |-
        Get the rights of a collaborator (member) of the gateway.
        Pseudo-rights in the response (such as the "_ALL" right) are not expanded.
      input:
        name: GetGatewayCollaboratorRequest
      output:
        name: GetCollaboratorResponse
      http:
      - method: ""
        path: ""
      - method: GET
        path: /gateways/{gateway_ids.gateway_id}/collaborator/user/{collaborator.user_ids.user_id}
      - method: GET
        path: /gateways/{gateway_ids.gateway_id}/collaborator/organization/{collaborator.organization_ids.organization_id}
    SetCollaborator:
      name: SetCollaborator
      comment: |-
        Set the rights of a collaborator (member) on the gateway.
        This method can also be used to delete the collaborator, by giving them no rights.
        The caller is required to have all assigned or/and removed rights.
      input:
        name: SetGatewayCollaboratorRequest
      output:
        package: google.protobuf
        name: Empty
      http:
      - method: PUT
        path: /gateways/{gateway_ids.gateway_id}/collaborators
    ListCollaborators:
      name: ListCollaborators
      comment: List the collaborators on this gateway.
      input:
        name: ListGatewayCollaboratorsRequest
      output:
        name: Collaborators
      http:
      - method: GET
        path: /gateways/{gateway_ids.gateway_id}/collaborators
GatewayClaimingServer:
  name: GatewayClaimingServer
  methods:
    Claim:
      name: Claim
      comment: Claims a gateway by claim authentication code or QR code and transfers the gateway to the target user.
      input:
        name: ClaimGatewayRequest
      output:
        name: GatewayIdentifiers
      http:
      - method: POST
        path: /gcls/claim
    AuthorizeGateway:
      name: AuthorizeGateway
      comment: AuthorizeGateway allows a gateway to be claimed.
      input:
        name: AuthorizeGatewayRequest
      output:
        package: google.protobuf
        name: Empty
      http:
      - method: POST
        path: /gcls/gateways/{gateway_ids.gateway_id}/authorize
    UnauthorizeGateway:
      name: UnauthorizeGateway
      comment: UnauthorizeGateway prevents a gateway from being claimed.
      input:
        name: GatewayIdentifiers
      output:
        package: google.protobuf
        name: Empty
      http:
      - method: DELETE
        path: /gcls/gateways/{gateway_id}/authorize
GatewayConfigurator:
  name: GatewayConfigurator
  methods:
    PullConfiguration:
      name: PullConfiguration
      input:
        name: PullGatewayConfigurationRequest
      output:
        name: Gateway
        stream: true
GatewayRegistry:
  name: GatewayRegistry
  comment: |-
    The GatewayRegistry service, exposed by the Identity Server, is used to manage
    gateway registrations.
  methods:
    Create:
      name: Create
      comment: |-
        Create a new gateway. This also sets the given organization or user as
        first collaborator with all possible rights.
      input:
        name: CreateGatewayRequest
      output:
        name: Gateway
      http:
      - method: POST
        path: /users/{collaborator.user_ids.user_id}/gateways
      - method: POST
        path: /organizations/{collaborator.organization_ids.organization_id}/gateways
    Get:
      name: Get
      comment: |-
        Get the gateway with the given identifiers, selecting the fields specified
        in the field mask.
        More or less fields may be returned, depending on the rights of the caller.
      input:
        name: GetGatewayRequest
      output:
        name: Gateway
      http:
      - method: GET
        path: /gateways/{gateway_ids.gateway_id}
    GetIdentifiersForEUI:
      name: GetIdentifiersForEUI
      comment: Get the identifiers of the gateway that has the given EUI registered.
      input:
        name: GetGatewayIdentifiersForEUIRequest
      output:
        name: GatewayIdentifiers
    List:
      name: List
      comment: |-
        List gateways where the given user or organization is a direct collaborator.
        If no user or organization is given, this returns the gateways the caller
        has access to.
        Similar to Get, this selects the fields given by the field mask.
        More or less fields may be returned, depending on the rights of the caller.
      input:
        name: ListGatewaysRequest
      output:
        name: Gateways
      http:
      - method: GET
        path: /gateways
      - method: GET
        path: /users/{collaborator.user_ids.user_id}/gateways
      - method: GET
        path: /organizations/{collaborator.organization_ids.organization_id}/gateways
    Update:
      name: Update
      comment: Update the gateway, changing the fields specified by the field mask to the provided values.
      input:
        name: UpdateGatewayRequest
      output:
        name: Gateway
      http:
      - method: PUT
        path: /gateways/{gateway.ids.gateway_id}
    Delete:
      name: Delete
      comment: Delete the gateway. This may not release the gateway ID for reuse, but it does release the EUI.
      input:
        name: GatewayIdentifiers
      output:
        package: google.protobuf
        name: Empty
      http:
      - method: DELETE
        path: /gateways/{gateway_id}
    Restore:
      name: Restore
      comment: |-
        Restore a recently deleted gateway. This does not restore the EUI,
        as that was released when deleting the gateway.

        Deployment configuration may specify if, and for how long after deletion,
        entities can be restored.
      input:
        name: GatewayIdentifiers
      output:
        package: google.protobuf
        name: Empty
      http:
      - method: POST
        path: /gateways/{gateway_id}/restore
    Purge:
      name: Purge
      comment: |-
        Purge the gateway. This will release both gateway ID and EUI for reuse.
        The gateway owner is responsible for clearing data from any (external) integrations
        that may store and expose data by gateway ID.
      input:
        name: GatewayIdentifiers
      output:
        package: google.protobuf
        name: Empty
      http:
      - method: DELETE
        path: /gateways/{gateway_id}/purge
Gs:
  name: Gs
  methods:
    GetGatewayConnectionStats:
      name: GetGatewayConnectionStats
      comment: |-
        Get statistics about the current gateway connection to the Gateway Server.
        This is not persisted between reconnects.
      input:
        name: GatewayIdentifiers
      output:
        name: GatewayConnectionStats
      http:
      - method: GET
        path: /gs/gateways/{gateway_id}/connection/stats
GsNs:
  name: GsNs
  comment: The GsNs service connects a Gateway Server to a Network Server.
  methods:
    HandleUplink:
      name: HandleUplink
      comment: Called by the Gateway Server when an uplink message arrives.
      input:
        name: UplinkMessage
      output:
        package: google.protobuf
        name: Empty
    ReportTxAcknowledgment:
      name: ReportTxAcknowledgment
      comment: Called by the Gateway Server when a Tx acknowledgment arrives.
      input:
        name: GatewayTxAcknowledgment
      output:
        package: google.protobuf
        name: Empty
GsPba:
  name: GsPba
  comment: The GsPba service connects a Gateway Server to a Packet Broker Agent.
  methods:
    PublishUplink:
      name: PublishUplink
      input:
        name: GatewayUplinkMessage
      output:
        package: google.protobuf
        name: Empty
    UpdateGateway:
      name: UpdateGateway
      comment: |-
        Update the gateway, changing the fields specified by the field mask to the provided values.
        To mark a gateway as online, call this rpc setting online to true, include status_public in field_mask and
        keep calling this rpc before the returned online_ttl passes to keep the gateway online.
      input:
        name: UpdatePacketBrokerGatewayRequest
      output:
        name: UpdatePacketBrokerGatewayResponse
GtwGs:
  name: GtwGs
  comment: The GtwGs service connects a gateway to a Gateway Server.
  methods:
    LinkGateway:
      name: LinkGateway
      comment: Link a gateway to the Gateway Server for streaming upstream messages and downstream messages.
      input:
        name: GatewayUp
        stream: true
      output:
        name: GatewayDown
        stream: true
    GetConcentratorConfig:
      name: GetConcentratorConfig
      comment: Get configuration for the concentrator.
      input:
        package: google.protobuf
        name: Empty
      output:
        name: ConcentratorConfig
    GetMQTTConnectionInfo:
      name: GetMQTTConnectionInfo
      comment: Get connection information to connect an MQTT gateway.
      input:
        name: GatewayIdentifiers
      output:
        name: MQTTConnectionInfo
      http:
      - method: GET
        path: /gs/gateways/{gateway_id}/mqtt-connection-info
    GetMQTTV2ConnectionInfo:
      name: GetMQTTV2ConnectionInfo
      comment: Get legacy connection information to connect a The Things Network Stack V2 MQTT gateway.
      input:
        name: GatewayIdentifiers
      output:
        name: MQTTConnectionInfo
      http:
      - method: GET
        path: /gs/gateways/{gateway_id}/mqttv2-connection-info
Is:
  name: Is
  methods:
    GetConfiguration:
      name: GetConfiguration
      comment: |-
        Get the configuration of the Identity Server. The response is typically used
        to enable or disable features in a user interface.
      input:
        name: GetIsConfigurationRequest
      output:
        name: GetIsConfigurationResponse
      http:
      - method: GET
        path: /is/configuration
Js:
  name: Js
  methods:
    GetJoinEUIPrefixes:
      name: GetJoinEUIPrefixes
      comment: Request the JoinEUI prefixes that are configured for this Join Server.
      input:
        package: google.protobuf
        name: Empty
      output:
        name: JoinEUIPrefixes
      http:
      - method: GET
        path: /js/join_eui_prefixes
JsEndDeviceRegistry:
  name: JsEndDeviceRegistry
  comment: The JsEndDeviceRegistry service allows clients to manage their end devices on the Join Server.
  methods:
    Get:
      name: Get
      comment: |-
        Get returns the device that matches the given identifiers.
        If there are multiple matches, an error will be returned.
      input:
        name: GetEndDeviceRequest
      output:
        name: EndDevice
      http:
      - method: GET
        path: /js/applications/{end_device_ids.application_ids.application_id}/devices/{end_device_ids.device_id}
    Set:
      name: Set
      comment: Set creates or updates the device.
      input:
        name: SetEndDeviceRequest
      output:
        name: EndDevice
      http:
      - method: PUT
        path: /js/applications/{end_device.ids.application_ids.application_id}/devices/{end_device.ids.device_id}
      - method: POST
        path: /js/applications/{end_device.ids.application_ids.application_id}/devices
    Provision:
      name: Provision
      comment: |-
        This rpc is deprecated; use EndDeviceTemplateConverter service instead.
        TODO: Remove (https://github.com/TheThingsNetwork/lorawan-stack/issues/999)
      input:
        name: ProvisionEndDevicesRequest
      output:
        name: EndDevice
        stream: true
      http:
      - method: PUT
        path: /js/applications/{application_ids.application_id}/provision-devices
    Delete:
      name: Delete
      comment: |-
        Delete deletes the device that matches the given identifiers.
        If there are multiple matches, an error will be returned.
      input:
        name: EndDeviceIdentifiers
      output:
        package: google.protobuf
        name: Empty
      http:
      - method: DELETE
        path: /js/applications/{application_ids.application_id}/devices/{device_id}
MessageProcessor:
  name: MessageProcessor
  comment: Encodes and decodes uplink messages.
  methods:
    EncodeDownlink:
      name: EncodeDownlink
      input:
        name: EncodeDownlinkMessageRequest
      output:
        name: ApplicationDownlink
    DecodeUplink:
      name: DecodeUplink
      input:
        name: DecodeUplinkMessageRequest
      output:
        name: ApplicationUplink
    DecodeDownlink:
      name: DecodeDownlink
      input:
        name: DecodeDownlinkMessageRequest
      output:
        name: ApplicationDownlink
NetworkCryptoService:
  name: NetworkCryptoService
  comment: Service for network layer cryptographic operations.
  methods:
    JoinRequestMIC:
      name: JoinRequestMIC
      comment: Calculate the join-request message MIC.
      input:
        name: CryptoServicePayloadRequest
      output:
        name: CryptoServicePayloadResponse
    JoinAcceptMIC:
      name: JoinAcceptMIC
      comment: Calculate the join-accept message MIC.
      input:
        name: JoinAcceptMICRequest
      output:
        name: CryptoServicePayloadResponse
    EncryptJoinAccept:
      name: EncryptJoinAccept
      comment: Encrypt the join-accept payload.
      input:
        name: CryptoServicePayloadRequest
      output:
        name: CryptoServicePayloadResponse
    EncryptRejoinAccept:
      name: EncryptRejoinAccept
      comment: Encrypt the rejoin-accept payload.
      input:
        name: CryptoServicePayloadRequest
      output:
        name: CryptoServicePayloadResponse
    DeriveNwkSKeys:
      name: DeriveNwkSKeys
      comment: Derive network session keys (NwkSKey, or FNwkSKey, SNwkSKey and NwkSEncKey)
      input:
        name: DeriveSessionKeysRequest
      output:
        name: NwkSKeysResponse
    GetNwkKey:
      name: GetNwkKey
      comment: Get the NwkKey. Crypto Servers may return status code FAILED_PRECONDITION when root keys are not exposed.
      input:
        name: GetRootKeysRequest
      output:
        name: KeyEnvelope
Ns:
  name: Ns
  comment: The Ns service manages the Network Server.
  methods:
    GenerateDevAddr:
      name: GenerateDevAddr
      comment: GenerateDevAddr requests a device address assignment from the Network Server.
      input:
        package: google.protobuf
        name: Empty
      output:
        name: GenerateDevAddrResponse
      http:
      - method: GET
        path: /ns/dev_addr
NsAs:
  name: NsAs
  comment: The NsAs service connects a Network Server to an Application Server.
  methods:
    HandleUplink:
      name: HandleUplink
      comment: Handle Application uplink messages.
      input:
        name: NsAsHandleUplinkRequest
      output:
        package: google.protobuf
        name: Empty
NsEndDeviceRegistry:
  name: NsEndDeviceRegistry
  comment: The NsEndDeviceRegistry service allows clients to manage their end devices on the Network Server.
  methods:
    Get:
      name: Get
      comment: |-
        Get returns the device that matches the given identifiers.
        If there are multiple matches, an error will be returned.
      input:
        name: GetEndDeviceRequest
      output:
        name: EndDevice
      http:
      - method: GET
        path: /ns/applications/{end_device_ids.application_ids.application_id}/devices/{end_device_ids.device_id}
    Set:
      name: Set
      comment: Set creates or updates the device.
      input:
        name: SetEndDeviceRequest
      output:
        name: EndDevice
      http:
      - method: PUT
        path: /ns/applications/{end_device.ids.application_ids.application_id}/devices/{end_device.ids.device_id}
      - method: POST
        path: /ns/applications/{end_device.ids.application_ids.application_id}/devices
    ResetFactoryDefaults:
      name: ResetFactoryDefaults
      comment: ResetFactoryDefaults resets device state to factory defaults.
      input:
        name: ResetAndGetEndDeviceRequest
      output:
        name: EndDevice
      http:
      - method: PATCH
        path: /ns/applications/{end_device_ids.application_ids.application_id}/devices/{end_device_ids.device_id}
    Delete:
      name: Delete
      comment: |-
        Delete deletes the device that matches the given identifiers.
        If there are multiple matches, an error will be returned.
      input:
        name: EndDeviceIdentifiers
      output:
        package: google.protobuf
        name: Empty
      http:
      - method: DELETE
        path: /ns/applications/{application_ids.application_id}/devices/{device_id}
NsGs:
  name: NsGs
  comment: The NsGs service connects a Network Server to a Gateway Server.
  methods:
    ScheduleDownlink:
      name: ScheduleDownlink
      comment: |-
        Instructs the Gateway Server to schedule a downlink message.
        The Gateway Server may refuse if there are any conflicts in the schedule or
        if a duty cycle prevents the gateway from transmitting.
      input:
        name: DownlinkMessage
      output:
        name: ScheduleDownlinkResponse
NsJs:
  name: NsJs
  comment: The NsJs service connects a Network Server to a Join Server.
  methods:
    HandleJoin:
      name: HandleJoin
      comment: Handle a join-request message.
      input:
        name: JoinRequest
      output:
        name: JoinResponse
    GetNwkSKeys:
      name: GetNwkSKeys
      comment: Request the network session keys for a particular session.
      input:
        name: SessionKeyRequest
      output:
        name: NwkSKeysResponse
NsPba:
  name: NsPba
  comment: The NsPba service connects a Network Server to a Packet Broker Agent.
  methods:
    PublishDownlink:
      name: PublishDownlink
      comment: |-
        PublishDownlink instructs the Packet Broker Agent to publish a downlink
        message to Packet Broker Router.
      input:
        name: DownlinkMessage
      output:
        package: google.protobuf
        name: Empty
OAuthAuthorizationRegistry:
  name: OAuthAuthorizationRegistry
  comment: |-
    The OAuthAuthorizationRegistry service, exposed by the Identity Server,
    is used to manage OAuth client authorizations for users.
  methods:
    List:
      name: List
      comment: List OAuth clients that are authorized by the user.
      input:
        name: ListOAuthClientAuthorizationsRequest
      output:
        name: OAuthClientAuthorizations
      http:
      - method: GET
        path: /users/{user_ids.user_id}/authorizations
    ListTokens:
      name: ListTokens
      comment: List OAuth access tokens issued to the OAuth client on behalf of the user.
      input:
        name: ListOAuthAccessTokensRequest
      output:
        name: OAuthAccessTokens
      http:
      - method: GET
        path: /users/{user_ids.user_id}/authorizations/{client_ids.client_id}/tokens
    Delete:
      name: Delete
      comment: Delete (de-authorize) an OAuth client for the user.
      input:
        name: OAuthClientAuthorizationIdentifiers
      output:
        package: google.protobuf
        name: Empty
      http:
      - method: DELETE
        path: /users/{user_ids.user_id}/authorizations/{client_ids.client_id}
    DeleteToken:
      name: DeleteToken
      comment: Delete (invalidate) an OAuth access token.
      input:
        name: OAuthAccessTokenIdentifiers
      output:
        package: google.protobuf
        name: Empty
      http:
      - method: DELETE
        path: /users/{user_ids.user_id}/authorizations/{client_ids.client_id}/tokens/{id}
OrganizationAccess:
  name: OrganizationAccess
  comment: |-
    The OrganizationAcces service, exposed by the Identity Server, is used to manage
    API keys and collaborators of organizations.
  methods:
    ListRights:
      name: ListRights
      comment: List the rights the caller has on this organization.
      input:
        name: OrganizationIdentifiers
      output:
        name: Rights
      http:
      - method: GET
        path: /organizations/{organization_id}/rights
    CreateAPIKey:
      name: CreateAPIKey
      comment: |-
        Create an API key scoped to this organization.
        Organization API keys can give access to the organization itself, as well as
        any application, gateway and OAuth client this organization is a collaborator of.
      input:
        name: CreateOrganizationAPIKeyRequest
      output:
        name: APIKey
      http:
      - method: POST
        path: /organizations/{organization_ids.organization_id}/api-keys
    ListAPIKeys:
      name: ListAPIKeys
      comment: List the API keys for this organization.
      input:
        name: ListOrganizationAPIKeysRequest
      output:
        name: APIKeys
      http:
      - method: GET
        path: /organizations/{organization_ids.organization_id}/api-keys
    GetAPIKey:
      name: GetAPIKey
      comment: Get a single API key of this organization.
      input:
        name: GetOrganizationAPIKeyRequest
      output:
        name: APIKey
      http:
      - method: GET
        path: /organizations/{organization_ids.organization_id}/api-keys/{key_id}
    UpdateAPIKey:
      name: UpdateAPIKey
      comment: |-
        Update the rights of an API key of the organization.
        This method can also be used to delete the API key, by giving it no rights.
        The caller is required to have all assigned or/and removed rights.
      input:
        name: UpdateOrganizationAPIKeyRequest
      output:
        name: APIKey
      http:
      - method: PUT
        path: /organizations/{organization_ids.organization_id}/api-keys/{api_key.id}
    GetCollaborator:
      name: GetCollaborator
      comment: |-
        Get the rights of a collaborator (member) of the organization.
        Pseudo-rights in the response (such as the "_ALL" right) are not expanded.
      input:
        name: GetOrganizationCollaboratorRequest
      output:
        name: GetCollaboratorResponse
      http:
      - method: ""
        path: ""
      - method: GET
        path: /organizations/{organization_ids.organization_id}/collaborator/user/{collaborator.user_ids.user_id}
    SetCollaborator:
      name: SetCollaborator
      comment: |-
        Set the rights of a collaborator (member) on the organization.
        Organization collaborators can get access to the organization itself, as well as
        any application, gateway and OAuth client this organization is a collaborator of.
        This method can also be used to delete the collaborator, by giving them no rights.
        The caller is required to have all assigned or/and removed rights.
      input:
        name: SetOrganizationCollaboratorRequest
      output:
        package: google.protobuf
        name: Empty
      http:
      - method: PUT
        path: /organizations/{organization_ids.organization_id}/collaborators
    ListCollaborators:
      name: ListCollaborators
      comment: List the collaborators on this organization.
      input:
        name: ListOrganizationCollaboratorsRequest
      output:
        name: Collaborators
      http:
      - method: GET
        path: /organizations/{organization_ids.organization_id}/collaborators
OrganizationRegistry:
  name: OrganizationRegistry
  comment: |-
    The OrganizationRegistry service, exposed by the Identity Server, is used to manage
    organization registrations.
  methods:
    Create:
      name: Create
      comment: |-
        Create a new organization. This also sets the given user as
        first collaborator with all possible rights.
      input:
        name: CreateOrganizationRequest
      output:
        name: Organization
      http:
      - method: POST
        path: /users/{collaborator.user_ids.user_id}/organizations
    Get:
      name: Get
      comment: |-
        Get the organization with the given identifiers, selecting the fields specified
        in the field mask.
        More or less fields may be returned, depending on the rights of the caller.
      input:
        name: GetOrganizationRequest
      output:
        name: Organization
      http:
      - method: GET
        path: /organizations/{organization_ids.organization_id}
    List:
      name: List
      comment: |-
        List organizations where the given user or organization is a direct collaborator.
        If no user or organization is given, this returns the organizations the caller
        has access to.
        Similar to Get, this selects the fields given by the field mask.
        More or less fields may be returned, depending on the rights of the caller.
      input:
        name: ListOrganizationsRequest
      output:
        name: Organizations
      http:
      - method: GET
        path: /organizations
      - method: GET
        path: /users/{collaborator.user_ids.user_id}/organizations
    Update:
      name: Update
      comment: Update the organization, changing the fields specified by the field mask to the provided values.
      input:
        name: UpdateOrganizationRequest
      output:
        name: Organization
      http:
      - method: PUT
        path: /organizations/{organization.ids.organization_id}
    Delete:
      name: Delete
      comment: Delete the organization. This may not release the organization ID for reuse.
      input:
        name: OrganizationIdentifiers
      output:
        package: google.protobuf
        name: Empty
      http:
      - method: DELETE
        path: /organizations/{organization_id}
    Restore:
      name: Restore
      comment: |-
        Restore a recently deleted organization.

        Deployment configuration may specify if, and for how long after deletion,
        entities can be restored.
      input:
        name: OrganizationIdentifiers
      output:
        package: google.protobuf
        name: Empty
      http:
      - method: POST
        path: /organizations/{organization_id}/restore
    Purge:
      name: Purge
      comment: |-
        Purge the organization. This will release the organization ID for reuse.
        The user is responsible for clearing data from any (external) integrations
        that may store and expose data by user or organization ID.
      input:
        name: OrganizationIdentifiers
      output:
        package: google.protobuf
        name: Empty
      http:
      - method: DELETE
        path: /organizations/{organization_id}/purge
Pba:
  name: Pba
  comment: The Pba service allows clients to manage peering through Packet Broker.
  methods:
    GetInfo:
      name: GetInfo
      comment: |-
        Get information about the Packet Broker registration.
        Viewing Packet Packet information requires administrative access.
      input:
        package: google.protobuf
        name: Empty
      output:
        name: PacketBrokerInfo
      http:
      - method: GET
        path: /pba/info
    Register:
      name: Register
      comment: |-
        Register with Packet Broker. If no registration exists, it will be created. Any existing registration will be updated.
        All registration settings are taken from Packet Broker Agent configuration and caller context.
        Packet Broker registration requires administrative access.
      input:
        package: google.protobuf
        name: Empty
      output:
        name: PacketBrokerNetwork
      http:
      - method: PUT
        path: /pba/registration
      - method: POST
        path: /pba/registration
    Deregister:
      name: Deregister
      comment: |-
        Deregister from Packet Broker.
        Packet Broker deregistration requires administrative access.
      input:
        package: google.protobuf
        name: Empty
      output:
        package: google.protobuf
        name: Empty
      http:
      - method: DELETE
        path: /pba/registration
    GetHomeNetworkDefaultRoutingPolicy:
      name: GetHomeNetworkDefaultRoutingPolicy
      comment: |-
        Get the default routing policy.
        Getting routing policies requires administrative access.
      input:
        package: google.protobuf
        name: Empty
      output:
        name: PacketBrokerDefaultRoutingPolicy
      http:
      - method: GET
        path: /pba/home-networks/policies/default
    SetHomeNetworkDefaultRoutingPolicy:
      name: SetHomeNetworkDefaultRoutingPolicy
      comment: |-
        Set the default routing policy.
        Setting routing policies requires administrative access.
      input:
        name: SetPacketBrokerDefaultRoutingPolicyRequest
      output:
        package: google.protobuf
        name: Empty
      http:
      - method: PUT
        path: /pba/home-networks/policies/default
      - method: POST
        path: /pba/home-networks/policies/default
    DeleteHomeNetworkDefaultRoutingPolicy:
      name: DeleteHomeNetworkDefaultRoutingPolicy
      comment: |-
        Deletes the default routing policy.
        Deleting routing policies requires administrative access.
      input:
        package: google.protobuf
        name: Empty
      output:
        package: google.protobuf
        name: Empty
      http:
      - method: DELETE
        path: /pba/home-networks/policies/default
    ListHomeNetworkRoutingPolicies:
      name: ListHomeNetworkRoutingPolicies
      comment: |-
        List the routing policies that Packet Broker Agent as Forwarder configured with Home Networks.
        Listing routing policies requires administrative access.
      input:
        name: ListHomeNetworkRoutingPoliciesRequest
      output:
        name: PacketBrokerRoutingPolicies
      http:
      - method: GET
        path: /pba/home-networks/policies
    GetHomeNetworkRoutingPolicy:
      name: GetHomeNetworkRoutingPolicy
      comment: |-
        Get the routing policy for the given Home Network.
        Getting routing policies requires administrative access.
      input:
        name: PacketBrokerNetworkIdentifier
      output:
        name: PacketBrokerRoutingPolicy
      http:
      - method: GET
        path: /pba/home-networks/policies/{net_id}
      - method: GET
        path: /pba/home-networks/policies/{net_id}/{tenant_id}
    SetHomeNetworkRoutingPolicy:
      name: SetHomeNetworkRoutingPolicy
      comment: |-
        Set the routing policy for the given Home Network.
        Setting routing policies requires administrative access.
      input:
        name: SetPacketBrokerRoutingPolicyRequest
      output:
        package: google.protobuf
        name: Empty
      http:
      - method: PUT
        path: /pba/home-networks/policies/{home_network_id.net_id}
      - method: POST
        path: /pba/home-networks/policies/{home_network_id.net_id}
      - method: PUT
        path: /pba/home-networks/policies/{home_network_id.net_id}/{home_network_id.tenant_id}
      - method: POST
        path: /pba/home-networks/policies/{home_network_id.net_id}/{home_network_id.tenant_id}
    DeleteHomeNetworkRoutingPolicy:
      name: DeleteHomeNetworkRoutingPolicy
      comment: |-
        Delete the routing policy for the given Home Network.
        Deleting routing policies requires administrative access.
      input:
        name: PacketBrokerNetworkIdentifier
      output:
        package: google.protobuf
        name: Empty
      http:
      - method: DELETE
        path: /pba/home-networks/policies/{net_id}
      - method: DELETE
        path: /pba/home-networks/policies/{net_id}/{tenant_id}
    ListNetworks:
      name: ListNetworks
      comment: |-
        List all listed networks.
        Listing networks requires administrative access.
      input:
        name: ListPacketBrokerNetworksRequest
      output:
        name: PacketBrokerNetworks
      http:
      - method: GET
        path: /pba/networks
    ListHomeNetworks:
      name: ListHomeNetworks
      comment: |-
        List the listed home networks for which routing policies can be configured.
        Listing home networks requires administrative access.
      input:
        name: ListPacketBrokerHomeNetworksRequest
      output:
        name: PacketBrokerNetworks
      http:
      - method: GET
        path: /pba/home-networks
    ListForwarderRoutingPolicies:
      name: ListForwarderRoutingPolicies
      comment: |-
        List the routing policies that Forwarders configured with Packet Broker Agent as Home Network.
        Listing routing policies requires administrative access.
      input:
        name: ListForwarderRoutingPoliciesRequest
      output:
        name: PacketBrokerRoutingPolicies
      http:
      - method: GET
        path: /pba/forwarders/policies
UserAccess:
  name: UserAccess
  comment: |-
    The UserAcces service, exposed by the Identity Server, is used to manage
    API keys of users.
  methods:
    ListRights:
      name: ListRights
      comment: List the rights the caller has on this user.
      input:
        name: UserIdentifiers
      output:
        name: Rights
      http:
      - method: GET
        path: /users/{user_id}/rights
    CreateAPIKey:
      name: CreateAPIKey
      comment: |-
        Create an API key scoped to this user.
        User API keys can give access to the user itself, as well as
        any organization, application, gateway and OAuth client this user is a collaborator of.
      input:
        name: CreateUserAPIKeyRequest
      output:
        name: APIKey
      http:
      - method: POST
        path: /users/{user_ids.user_id}/api-keys
    ListAPIKeys:
      name: ListAPIKeys
      comment: List the API keys for this user.
      input:
        name: ListUserAPIKeysRequest
      output:
        name: APIKeys
      http:
      - method: GET
        path: /users/{user_ids.user_id}/api-keys
    GetAPIKey:
      name: GetAPIKey
      comment: Get a single API key of this user.
      input:
        name: GetUserAPIKeyRequest
      output:
        name: APIKey
      http:
      - method: GET
        path: /users/{user_ids.user_id}/api-keys/{key_id}
    UpdateAPIKey:
      name: UpdateAPIKey
      comment: |-
        Update the rights of an API key of the user.
        This method can also be used to delete the API key, by giving it no rights.
        The caller is required to have all assigned or/and removed rights.
      input:
        name: UpdateUserAPIKeyRequest
      output:
        name: APIKey
      http:
      - method: PUT
        path: /users/{user_ids.user_id}/api-keys/{api_key.id}
    CreateLoginToken:
      name: CreateLoginToken
      comment: Create a login token that can be used for a one-time login as a user.
      input:
        name: CreateLoginTokenRequest
      output:
        name: CreateLoginTokenResponse
      http:
      - method: POST
        path: /users/{user_ids.user_id}/login-tokens
UserInvitationRegistry:
  name: UserInvitationRegistry
  methods:
    Send:
      name: Send
      comment: Invite a user to join the network.
      input:
        name: SendInvitationRequest
      output:
        name: Invitation
      http:
      - method: POST
        path: /invitations
    List:
      name: List
      comment: List the invitations the caller has sent.
      input:
        name: ListInvitationsRequest
      output:
        name: Invitations
      http:
      - method: GET
        path: /invitations
    Delete:
      name: Delete
      comment: Delete (revoke) a user invitation.
      input:
        name: DeleteInvitationRequest
      output:
        package: google.protobuf
        name: Empty
      http:
      - method: DELETE
        path: /invitations
UserRegistry:
  name: UserRegistry
  comment: |-
    The UserRegistry service, exposed by the Identity Server, is used to manage
    user registrations.
  methods:
    Create:
      name: Create
      comment: Register a new user. This method may be restricted by network settings.
      input:
        name: CreateUserRequest
      output:
        name: User
      http:
      - method: POST
        path: /users
    Get:
      name: Get
      comment: |-
        Get the user with the given identifiers, selecting the fields given by the
        field mask. The method may return more or less fields, depending on the rights
        of the caller.
      input:
        name: GetUserRequest
      output:
        name: User
      http:
      - method: GET
        path: /users/{user_ids.user_id}
    List:
      name: List
      comment: List users of the network. This method is typically restricted to admins only.
      input:
        name: ListUsersRequest
      output:
        name: Users
      http:
      - method: GET
        path: /users
    Update:
      name: Update
      comment: |-
        Update the user, changing the fields specified by the field mask to the provided values.
        This method can not be used to change the password, see the UpdatePassword method for that.
      input:
        name: UpdateUserRequest
      output:
        name: User
      http:
      - method: PUT
        path: /users/{user.ids.user_id}
    CreateTemporaryPassword:
      name: CreateTemporaryPassword
      comment: |-
        Create a temporary password that can be used for updating a forgotten password.
        The generated password is sent to the user's email address.
      input:
        name: CreateTemporaryPasswordRequest
      output:
        package: google.protobuf
        name: Empty
      http:
      - method: POST
        path: /users/{user_ids.user_id}/temporary_password
    UpdatePassword:
      name: UpdatePassword
      comment: Update the password of the user.
      input:
        name: UpdateUserPasswordRequest
      output:
        package: google.protobuf
        name: Empty
      http:
      - method: PUT
        path: /users/{user_ids.user_id}/password
    Delete:
      name: Delete
      comment: Delete the user. This may not release the user ID for reuse.
      input:
        name: UserIdentifiers
      output:
        package: google.protobuf
        name: Empty
      http:
      - method: DELETE
        path: /users/{user_id}
    Restore:
      name: Restore
      comment: |-
        Restore a recently deleted user.

        Deployment configuration may specify if, and for how long after deletion,
        entities can be restored.
      input:
        name: UserIdentifiers
      output:
        package: google.protobuf
        name: Empty
      http:
      - method: POST
        path: /users/{user_id}/restore
    Purge:
      name: Purge
      comment: |-
        Purge the user. This will release the user ID for reuse.
        The user is responsible for clearing data from any (external) integrations
        that may store and expose data by user or organization ID.
      input:
        name: UserIdentifiers
      output:
        package: google.protobuf
        name: Empty
      http:
      - method: DELETE
        path: /users/{user_id}/purge
UserSessionRegistry:
  name: UserSessionRegistry
  comment: |-
    The UserSessionRegistry service, exposed by the Identity Server, is used to manage
    (browser) sessions of the user.
  methods:
    List:
      name: List
      comment: List the active sessions for the given user.
      input:
        name: ListUserSessionsRequest
      output:
        name: UserSessions
      http:
      - method: GET
        path: /users/{user_ids.user_id}/sessions
    Delete:
      name: Delete
      comment: Delete (revoke) the given user session.
      input:
        name: UserSessionIdentifiers
      output:
        package: google.protobuf
        name: Empty
      http:
      - method: DELETE
        path: /users/{user_ids.user_id}/sessions/{session_id}
